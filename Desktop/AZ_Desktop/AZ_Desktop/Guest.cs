// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using AZ_Desktop;
//
//    var guest = Guest.FromJson(jsonString);

namespace AZ_Desktop
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

  

    public partial class Guest
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("g_name")]
        public string G_name { get; set; }

        [JsonProperty("g_chip")]
        public string G_chip { get; set; }

        [JsonProperty("g_species")]
        public string G_species { get; set; }

        [JsonProperty("g_gender")]
        public string G_gender { get; set; }

        [JsonProperty("g_in_date")]
        public DateTimeOffset G_in_date { get; set; }

        [JsonProperty("g_in_place")]
        public string G_in_place { get; set; }

        [JsonProperty("g_out_date")]
        public DateTimeOffset G_out_date { get; set; }

        [JsonProperty("g_adoption")]
        public string G_adoption { get; set; }

        [JsonProperty("g_other")]
        public string G_other { get; set; }

        [JsonProperty("g_image")]
        public string G_image { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset Created_at { get; set; }

        [JsonProperty("updated_at")]
        public DateTimeOffset Updated_at { get; set; }

        [JsonProperty("deleted_at")]
        public object Deleted_at { get; set; }

        public override string ToString()
        {
            return $"{this.G_species} - {this.G_name}";
        }
    }

    public enum G_species { kutya, macska };
    public enum G_gender { nőstény, hím, ismeretlen };
    public enum G_adoption { igen, nem };

    public partial class Guest
    {
        public static Guest[] FromJson(string json) => JsonConvert.DeserializeObject<Guest[]>(json, AZ_Desktop.Converter.Settings);
    }
    /***/
    

    /***** 1 *****/

    internal class G_speciesConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(G_species) || t == typeof(G_species?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "kutya":
                    return G_species.kutya;
                case "macska":
                    return G_species.macska;
            }
            throw new Exception("Cannot unmarshal type Gender");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (G_species)untypedValue;
            switch (value)
            {
                case G_species.kutya:
                    serializer.Serialize(writer, "kutya");
                    return;
                case G_species.macska:
                    serializer.Serialize(writer, "macska");
                    return;
            }
            throw new Exception("Cannot marshal type G_species");
        }

        public static readonly G_speciesConverter Singleton = new G_speciesConverter();
    }
    /***** 1 *****/

    /***** 2 *****/

    internal class G_genderConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(G_gender) || t == typeof(G_gender?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "nőstény":
                    return G_gender.nőstény;
                case "hím":
                    return G_gender.hím;
                case "ismeretlen":
                    return G_gender.ismeretlen;
            }
            throw new Exception("Cannot unmarshal type G_gender");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (G_gender)untypedValue;
            switch (value)
            {
                case G_gender.nőstény:
                    serializer.Serialize(writer, "nőstény");
                    return;
                case G_gender.hím:
                    serializer.Serialize(writer, "hím");
                    return;
                case G_gender.ismeretlen:
                    serializer.Serialize(writer, "ismeretlen");
                    return;
            }
            throw new Exception("Cannot marshal type G_gender");
        }

        public static readonly G_genderConverter Singleton = new G_genderConverter();
    }

    /***** 2 *****/

    /***** 3 *****/

    internal class G_adoptionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(G_adoption) || t == typeof(G_adoption?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "igen":
                    return G_adoption.igen;
                case "nem":
                    return G_adoption.nem;
            }
            throw new Exception("Cannot unmarshal type G_adoption");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (G_adoption)untypedValue;
            switch (value)
            {
                case G_adoption.igen:
                    serializer.Serialize(writer, "igen");
                    return;
                case G_adoption.nem:
                    serializer.Serialize(writer, "nem");
                    return;
            }
            throw new Exception("Cannot marshal type G_adoption");
        }

        public static readonly G_adoptionConverter Singleton = new G_adoptionConverter();
    }

    /***** 3 *****/

}
