// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using AZ_Desktop;
//
//    var user = User.FromJson(jsonString);

namespace AZ_Desktop
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    using AZ_Desktop;

    public partial class User
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("email_verified_at")]
        public DateTimeOffset EmailVerified_at { get; set; }

        [JsonProperty("password")]
        public string Password { get; set; }

        [JsonProperty("remember_token")]
        public string Remember_token { get; set; }

        [JsonProperty("address")]
        public string Address { get; set; }

        [JsonProperty("phone")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Phone { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset Created_at { get; set; }

        [JsonProperty("updated_at")]
        public DateTimeOffset Updated_at { get; set; }

        public override string ToString()
        {
            return Name;
        }
    }

    public partial class User
    {
        public static User[] FromJson(string json) => JsonConvert.DeserializeObject<User[]>(json, AZ_Desktop.Converter.Settings);
    }

    public static class UserSerialize
    {
        public static string ToJson(this User[] self) => JsonConvert.SerializeObject(self, AZ_Desktop.Converter.Settings);
    }

    /***/

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}

/*
 
    public static class UserSerialize
    {
        public static string ToJson(this User[] self) => JsonConvert.SerializeObject(self, AZ_Desktop.Converter.Settings);
    }

    /***/





/*
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AZ_Desktop
{
    public class User
    {
        int id;
        string name;
        string email;
        string password;
        string address;
        int phone;

        public User(int id, string name, string email, string password, string address, int phone)
        {
            this.Id = id;
            this.Name = name;
            this.Email = email;
            this.Password = password;
            this.Address = address;
            this.Phone = phone;
        }

        public int Id { get => id; set => id = value; }
        public string Name { get => name; set => name = value; }
        public string Email { get => email; set => email = value; }
        public string Password { get => password; set => password = value; }
        public string Address { get => address; set => address = value; }
        public int Phone { get => phone; set => phone = value; }


        public override string ToString()
        {
            return $"{this.id} - {this.name} - {this.email}";
        }
    }
}
*/